Index: e-smith-formmagick/e-smith-formmagick.spec
diff -u e-smith-formmagick/root/usr/lib/perl5/site_perl/esmith/FormMagick.pm:1.63 e-smith-formmagick/root/usr/lib/perl5/site_perl/esmith/FormMagick.pm:1.65
--- e-smith-formmagick/root/usr/lib/perl5/site_perl/esmith/FormMagick.pm:1.63	Wed Oct 22 12:02:28 2003
+++ e-smith-formmagick/root/usr/lib/perl5/site_perl/esmith/FormMagick.pm	Thu Aug  5 12:23:31 2004
@@ -3,12 +3,12 @@
 # This program is free software; you can redistribute it and/or
 # modify it under the same terms as Perl itself.
 #
-# $Id: FormMagick.pm,v 1.62 2003/10/10 20:51:51 msoulier Exp $
+# $Id: FormMagick.pm,v 1.64 2004/01/06 02:01:44 msoulier Exp $
 #----------------------------------------------------------------------
 
 package    esmith::FormMagick;
 
-our $VERSION = sprintf '%d.%03d', q$Revision: 1.62 $ =~ /: (\d+).(\d+)/;
+our $VERSION = sprintf '%d.%03d', q$Revision: 1.64 $ =~ /: (\d+).(\d+)/;
 
 use CGI::FormMagick;
 use Exporter;
@@ -229,9 +229,9 @@
     my $charset = $args{charset} || 'ISO-8859-1';
 
     $self = CGI::FormMagick::new($class, 
-				type => 'string', 
-				source => $data,   
-				charset => $charset);   
+                type => 'string', 
+                source => $data,   
+                charset => $charset);   
 
 
     $self->{lexfiles} = \@lexfiles;
@@ -266,23 +266,23 @@
     my @languages;
 
     my @missing_languages;
-   
+
     my $lexdir = $ENV{ESMITH_LEXPATH} || "/etc/e-smith/locale";
 
     foreach my $lang ($self->SUPER::get_languages(),$self->fallback_language())
     {
-	if (-d "$lexdir/$lang")
-	{
-	    push @languages, $lang;
-	    next;
-	}
+        if (-d "$lexdir/$lang")
+        {
+            push @languages, $lang;
+            next;
+        }
 
-	push @missing_languages, $lang;
+        push @missing_languages, $lang;
     }
 
     warn "get_languages: " .
-	"Browser asked for missing languages @missing_languages\n"
-	if (scalar @missing_languages);
+    "Browser asked for missing languages @missing_languages\n"
+    if (scalar @missing_languages);
 
     return @languages;
 }
@@ -324,13 +324,11 @@
     }
 
     if ( $scriptname =~ m:^\.\./\.\./\.\./functions: and 
-	 $filename =~ m:^/etc/e-smith/web/panels/manager/(cgi-bin|html):
-	)
+    $filename =~ m:^/etc/e-smith/web/panels/manager/(cgi-bin|html):)
     {
-	$scriptname = "/etc/e-smith/web/functions/" . basename $filename;
+        $scriptname = "/etc/e-smith/web/functions/" . basename $filename;
     }
     return $scriptname;
-
 }
 
 =head2 _lexicon_filename_list 
@@ -435,8 +433,8 @@
 
 sub _navigation_setup {
     my ($self, %args) = @_;
-    $self->{heading}     	= undef;
-    $self->{description} 	= undef;
+    $self->{heading}        = undef;
+    $self->{description}    = undef;
     $self->{heading_weight}     = undef;
     $self->{description_weight} = undef;
     if (open SCRIPT, _filename(%args))
@@ -446,17 +444,16 @@
             $self->{heading} = $1 if (/^\s*#\s*heading\s*:\s*(.+?)\s*$/);
 
             $self->{description} = $1 
-		if (/^\s*#\s*description\s*:\s*(.+?)\s*$/);
+            if (/^\s*#\s*description\s*:\s*(.+?)\s*$/);
 
             ($self->{heading_weight}, $self->{description_weight}) = ($1, $2) 
-		if (/^\s*#\s*navigation\s*:\s*(\d+?)\s+(\d+?)\s*$/);
+            if (/^\s*#\s*navigation\s*:\s*(\d+?)\s+(\d+?)\s*$/);
 
             last if (defined $self->{heading} and 
-		     defined $self->{description} and
-		     defined $self->{heading_weight} and
-		     defined $self->{description_weight}
-		    );
-	}
+                defined $self->{description} and
+                defined $self->{heading_weight} and
+                defined $self->{description_weight});
+        }
     }
     close SCRIPT;
 }
@@ -464,7 +461,9 @@
 =head2 $fm->get_validation_attribute
 
 This method overrides the one in CGI::FormMagick::Validator to forcibly
-add "nopipes" to the list of validations performed.
+add "nopipes" to the list of validations performed. Note that if the
+validation string contains "permitpipes", it will be removed, and "nopipes"
+will _not_ be added.
 
 =begin testing
 my $fm = esmith::FormMagick->new(filename=>"20e-smith-formmagick/nopipes");
@@ -491,9 +490,17 @@
 
 sub get_validation_attribute {
     my ($fm, $field) = @_;
-    if ($field->{validation}) {
-        return "$field->{validation}, nopipes";
-    } else {
+    my $vfield = $field->{validation};
+    if ($vfield and ($vfield =~ s/(,\s)?permitpipes//))
+    {
+        $vfield =~ s/^\s*,//;
+        return $vfield;
+    }
+    elsif ($vfield)
+    {
+        return "$vfield, nopipes";
+    }
+    else {
         return "nopipes";
     }
 }
@@ -604,45 +611,44 @@
 
     if ($fm->{cgi}->param("status_message")) 
     {
-	my $msg = qq(<h2>) . $fm->localise('OPERATION_STATUS_REPORT') .  
-		  qq(</h2>);
-           $msg  .= $fm->localise($fm->{cgi}->param("status_message"));
+        my $msg = qq(<h2>) . $fm->localise('OPERATION_STATUS_REPORT') .  
+            qq(</h2>);
+        $msg  .= $fm->localise($fm->{cgi}->param("status_message"));
 
         my $div_class = $fm->{cgi}->param("status_type") || undef;
 
-	if (defined $div_class)
-	{
-	    my $q = $fm->{cgi};
-
-	    my $img_string;
-	    
-	    if ($div_class eq "success") 
-	    {
-		$img_string = 
-			qq(src="/server-common/tickmark.jpg" ALT="SUCCESS");
-	    }
-	    else
-	    {
-		$img_string = 
-			qq(src="/server-common/checkmark.jpg" ALT="ERROR");
-	    }
-
-	    print $q->table({-class =>"sme-borders"},
-		$q->Tr(
-		    $q->td( "<img $img_string>"),
-		    $q->td( $q->div( {-class=>$div_class}, $msg) )
-		));
-	}
-	else
-	{
-	    print $fm->{cgi}->div($msg);
-	    print $fm->{cgi}->hr({-class => "sectionbar"});
-	}
+        if (defined $div_class)
+        {
+            my $q = $fm->{cgi};
+
+            my $img_string;
+
+            if ($div_class eq "success") 
+            {
+                $img_string = 
+                    qq(src="/server-common/tickmark.jpg" ALT="SUCCESS");
+            }
+            else
+            {
+                $img_string = 
+                    qq(src="/server-common/checkmark.jpg" ALT="ERROR");
+            }
+
+            print $q->table({-class =>"sme-borders"},
+            $q->Tr(
+                $q->td( "<img $img_string>"),
+                $q->td( $q->div( {-class=>$div_class}, $msg) )
+            ));
+        }
+        else
+        {
+            print $fm->{cgi}->div($msg);
+            print $fm->{cgi}->hr({-class => "sectionbar"});
+        }
 
         $fm->{cgi}->param(-name => "status_message" => value => "");
         $fm->{cgi}->param(-name => "status_type" => value => "");
     }
-
     turn_off_buttons($fm);
 }
 
@@ -744,35 +750,35 @@
 
 sub validate_password
 {
-	my ($fm,$strength,$pass) = @_;
+    my ($fm,$strength,$pass) = @_;
 
-	use Crypt::Cracklib;
+    use Crypt::Cracklib;
 
-	my $reason;
-	if ($strength eq 'strong')
-	{
-		$reason = fascist_check($pass, '/usr/lib/cracklib_dict');
-		unless ($reason eq "ok")
-		{
-			$reason = $fm->localise("Bad Password Choice") . ": "
-			. $fm->localise("The password you have chosen is not a good choice, because")
-			. " " . $fm->localise($reason) . ".";
-		}
-	}
-	elsif ($strength eq "none")
-	{
-	    $reason = 'OK';
-	}
-	else # assume normal strength checking
-	{
-		$reason = $fm->call_fm_validation('password', $pass, undef);
-	}
-	$reason ||= "Software error: password check failed";
-	if ($reason eq 'ok' || $reason eq 'OK') {
-		return('OK');
-	} else {
-	    return $reason;
-	}
+    my $reason;
+    if ($strength eq 'strong')
+    {
+        $reason = fascist_check($pass, '/usr/lib/cracklib_dict');
+        unless ($reason eq "ok")
+        {
+            $reason = $fm->localise("Bad Password Choice") . ": "
+                . $fm->localise("The password you have chosen is not a good choice, because")
+                . " " . $fm->localise($reason) . ".";
+        }
+    }
+    elsif ($strength eq "none")
+    {
+        $reason = 'OK';
+    }
+    else # assume normal strength checking
+    {
+        $reason = $fm->call_fm_validation('password', $pass, undef);
+    }
+    $reason ||= "Software error: password check failed";
+    if ($reason eq 'ok' || $reason eq 'OK') {
+        return('OK');
+    } else {
+        return $reason;
+    }
 }
 
 =pod
